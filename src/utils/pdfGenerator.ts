import jsPDF from 'jspdf';
import { KPIData } from '../types/stats';

// Helper function to add a section header
const addSectionHeader = (pdf: jsPDF, text: string, y: number) => {
  pdf.setFillColor(0, 79, 128); // Primary blue
  pdf.rect(20, y - 6, pdf.internal.pageSize.width - 40, 10, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.text(text, 25, y);
  pdf.setTextColor(0, 0, 0);
  return y + 15;
};

// Helper function to add a data row
const addDataRow = (pdf: jsPDF, label: string, value: string, x: number, y: number, labelWidth: number = 80) => {
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  pdf.text(label, x, y);
  pdf.setFont('helvetica', 'bold');
  pdf.text(value, x + labelWidth, y);
  return y + 7;
};

// Helper function to add the header
const addHeader = (pdf: jsPDF, title: string) => {
  const pageWidth = pdf.internal.pageSize.width;
  
  // Add logo colors
  pdf.setFillColor(0, 79, 128); // Primary blue
  pdf.rect(0, 0, pageWidth, 40, 'F');
  
  // Add title
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text(title, pageWidth / 2, 25, { align: 'center' });
  
  // Add timestamp
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  const timestamp = new Date().toLocaleString();
  pdf.text(`Generated on: ${timestamp}`, pageWidth / 2, 35, { align: 'center' });
  
  pdf.setTextColor(0, 0, 0);
};

// Helper function to add the footer
const addFooter = (pdf: jsPDF) => {
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  
  // Add footer background
  pdf.setFillColor(0, 79, 128);
  pdf.rect(0, pageHeight - 25, pageWidth, 25, 'F');
  
  // Add footer text
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by Swayven Digital A/B Test Stats Toolkit', pageWidth / 2, pageHeight - 15, { align: 'center' });
  pdf.text('https://ab-test-toolkit.swayvendigital.com', pageWidth / 2, pageHeight - 8, { align: 'center' });
};

export const generateUpliftPDF = (kpiData: KPIData, uplifts: any) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  
  // Add header
  addHeader(pdf, 'KPI Uplift Analysis Results');
  
  let yPos = 60;
  
  // KPI Data Summary
  yPos = addSectionHeader(pdf, 'KPI Data Summary', yPos);
  
  // Add scorecards with the same styling as the calculator
  const scorecardWidth = (pageWidth - 80) / 3;
  const scorecardHeight = 40;
  const scorecardSpacing = 10;
  
  // Mean Scorecard
  pdf.setFillColor(0, 79, 128);
  pdf.rect(20, yPos, scorecardWidth, scorecardHeight, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(12);
  pdf.text('Mean', 25, yPos + 10);
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text(kpiData?.mean?.toFixed(4) || '0', 25, yPos + 25);
  
  // Standard Deviation Scorecard
  pdf.setFillColor(103, 204, 52);
  pdf.rect(20 + scorecardWidth + scorecardSpacing, yPos, scorecardWidth, scorecardHeight, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(12);
  pdf.text('Standard Deviation', 25 + scorecardWidth + scorecardSpacing, yPos + 10);
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text(kpiData?.standardDeviation?.toFixed(4) || '0', 25 + scorecardWidth + scorecardSpacing, yPos + 25);
  
  // Data Points Scorecard
  pdf.setFillColor(255, 170, 12);
  pdf.rect(20 + (scorecardWidth + scorecardSpacing) * 2, yPos, scorecardWidth, scorecardHeight, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(12);
  pdf.text('Data Points', 25 + (scorecardWidth + scorecardSpacing) * 2, yPos + 10);
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text(kpiData.values.length.toString(), 25 + (scorecardWidth + scorecardSpacing) * 2, yPos + 25);
  
  yPos += scorecardHeight + 20;
  
  // Uplift Targets
  yPos = addSectionHeader(pdf, 'Recommended Uplift Targets', yPos);
  
  // Conservative Target
  pdf.setFillColor(103, 204, 52);
  pdf.rect(30, yPos - 5, pageWidth - 60, 25, 'F');
  pdf.setTextColor(255, 255, 255);
  yPos = addDataRow(pdf, 'Conservative (0.5σ):', `${(uplifts.conservative * 100).toFixed(1)}% uplift`, 35, yPos + 5);
  yPos = addDataRow(pdf, 'Target Value:', kpiData?.mean ? (kpiData.mean * (1 + uplifts.conservative)).toFixed(4) : '0', 35, yPos);
  pdf.setTextColor(0, 0, 0);
  
  yPos += 10;
  
  // Moderate Target
  pdf.setFillColor(255, 170, 12);
  pdf.rect(30, yPos - 5, pageWidth - 60, 25, 'F');
  pdf.setTextColor(255, 255, 255);
  yPos = addDataRow(pdf, 'Moderate (1.0σ):', `${(uplifts.moderate * 100).toFixed(1)}% uplift`, 35, yPos + 5);
  yPos = addDataRow(pdf, 'Target Value:', kpiData?.mean ? (kpiData.mean * (1 + uplifts.moderate)).toFixed(4) : '0', 35, yPos);
  pdf.setTextColor(0, 0, 0);
  
  yPos += 10;
  
  // Aggressive Target
  pdf.setFillColor(232, 80, 110);
  pdf.rect(30, yPos - 5, pageWidth - 60, 25, 'F');
  pdf.setTextColor(255, 255, 255);
  yPos = addDataRow(pdf, 'Aggressive (2.0σ):', `${(uplifts.aggressive * 100).toFixed(1)}% uplift`, 35, yPos + 5);
  yPos = addDataRow(pdf, 'Target Value:', kpiData?.mean ? (kpiData.mean * (1 + uplifts.aggressive)).toFixed(4) : '0', 35, yPos);
  pdf.setTextColor(0, 0, 0);
  
  yPos += 20;
  
  // Add Data Distribution Graph
  yPos = addSectionHeader(pdf, 'Data Distribution', yPos);
  
  // Draw graph background
  pdf.setFillColor(240, 240, 240);
  pdf.rect(30, yPos, pageWidth - 60, 80, 'F');
  
  // Draw mean line
  pdf.setDrawColor(0, 79, 128);
  pdf.setLineWidth(0.5);
  const meanX = 30 + ((pageWidth - 60) * 0.5);
  pdf.line(meanX, yPos, meanX, yPos + 80);
  
  // Draw standard deviation ranges
  pdf.setDrawColor(103, 204, 52);
  pdf.setLineWidth(0.3);
  const stdDevWidth = (pageWidth - 60) * 0.25;
  pdf.line(meanX - stdDevWidth, yPos, meanX - stdDevWidth, yPos + 80);
  pdf.line(meanX + stdDevWidth, yPos, meanX + stdDevWidth, yPos + 80);
  
  // Add labels
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(10);
  pdf.text('Mean', meanX, yPos + 85);
  pdf.text('-1σ', meanX - stdDevWidth, yPos + 85);
  pdf.text('+1σ', meanX + stdDevWidth, yPos + 85);
  
  // Add footer
  addFooter(pdf);
  
  return pdf;
};

export const generateSampleSizePDF = (params: any, sampleSize: number) => {
  const pdf = new jsPDF();
  
  // Add header
  addHeader(pdf, 'Sample Size Calculator Results');
  
  let yPos = 60;
  
  // Test Parameters
  yPos = addSectionHeader(pdf, 'Test Parameters', yPos);
  yPos = addDataRow(pdf, 'KPI Type:', params.kpiType, 30, yPos);
  yPos = addDataRow(pdf, 'Baseline Rate:', `${typeof params.baselineRate === 'string' ? params.baselineRate : (params.baselineRate * 100).toFixed(2)}%`, 30, yPos);
  yPos = addDataRow(pdf, 'Expected Uplift:', `${typeof params.expectedUplift === 'string' ? params.expectedUplift : (params.expectedUplift * 100).toFixed(2)}%`, 30, yPos);
  yPos = addDataRow(pdf, 'Confidence Level:', `${(params.confidenceLevel * 100).toFixed(0)}%`, 30, yPos);
  yPos = addDataRow(pdf, 'Statistical Power:', `${(params.power * 100).toFixed(0)}%`, 30, yPos);
  
  yPos += 20;
  
  // Results
  yPos = addSectionHeader(pdf, 'Required Sample Size', yPos);
  
  // Add highlighted result box
  pdf.setFillColor(0, 79, 128, 0.1);
  pdf.rect(30, yPos - 5, pdf.internal.pageSize.width - 60, 30, 'F');
  
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(0, 79, 128);
  pdf.text(`${sampleSize.toLocaleString()} users per variant`, pdf.internal.pageSize.width / 2, yPos + 15, { align: 'center' });
  
  yPos += 45;
  
  // Notes
  yPos = addSectionHeader(pdf, 'Important Notes', yPos);
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  pdf.setTextColor(0, 0, 0);
  
  const notes = [
    '• This is the minimum sample size required per variant (A and B)',
    '• Total test size needed = Sample Size × 2',
    '• Running the test for longer may improve accuracy',
    '• Consider external factors that might affect results'
  ];
  
  notes.forEach((note) => {
    pdf.text(note, 30, yPos);
    yPos += 8;
  });
  
  // Add footer
  addFooter(pdf);
  
  return pdf;
};

export const generateSignificancePDF = (results: any, stats: any) => {
  const pdf = new jsPDF();
  
  // Add header
  addHeader(pdf, 'Statistical Significance Results');
  
  let yPos = 60;
  
  // Test Details
  yPos = addSectionHeader(pdf, 'Test Details', yPos);
  yPos = addDataRow(pdf, 'Metric Type:', results.metricType, 30, yPos);
  
  yPos += 10;
  
  // Control Group
  pdf.setFillColor(240, 240, 240);
  pdf.rect(30, yPos - 5, pdf.internal.pageSize.width - 60, 35, 'F');
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Control Group', 35, yPos);
  yPos += 10;
  
  if (results.metricType === 'conversion') {
    const controlRate = (Number(results.controlGroup.conversions) / Number(results.controlGroup.size) * 100).toFixed(2);
    yPos = addDataRow(pdf, 'Sample Size:', results.controlGroup.size.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Conversions:', results.controlGroup.conversions.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Rate:', `${controlRate}%`, 35, yPos);
  } else {
    yPos = addDataRow(pdf, 'Sample Size:', results.controlGroup.size.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Mean:', results.controlGroup.mean.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Std Dev:', results.controlGroup.stdDev.toString(), 35, yPos);
  }
  
  yPos += 10;
  
  // Treatment Group
  pdf.setFillColor(240, 240, 240);
  pdf.rect(30, yPos - 5, pdf.internal.pageSize.width - 60, 35, 'F');
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Treatment Group', 35, yPos);
  yPos += 10;
  
  if (results.metricType === 'conversion') {
    const treatmentRate = (Number(results.treatmentGroup.conversions) / Number(results.treatmentGroup.size) * 100).toFixed(2);
    yPos = addDataRow(pdf, 'Sample Size:', results.treatmentGroup.size.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Conversions:', results.treatmentGroup.conversions.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Rate:', `${treatmentRate}%`, 35, yPos);
  } else {
    yPos = addDataRow(pdf, 'Sample Size:', results.treatmentGroup.size.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Mean:', results.treatmentGroup.mean.toString(), 35, yPos);
    yPos = addDataRow(pdf, 'Std Dev:', results.treatmentGroup.stdDev.toString(), 35, yPos);
  }
  
  yPos += 20;
  
  // Results
  yPos = addSectionHeader(pdf, 'Statistical Results', yPos);
  
  // Add result box
  const resultColor = stats.significant ? [103, 204, 52] : [232, 80, 110]; // Green if significant, red if not
  pdf.setFillColor(resultColor[0], resultColor[1], resultColor[2], 0.1);
  pdf.rect(30, yPos - 5, pdf.internal.pageSize.width - 60, 50, 'F');
  
  yPos = addDataRow(pdf, 'P-Value:', stats.pValue.toFixed(4), 35, yPos + 5);
  yPos = addDataRow(pdf, 'Relative Change:', `${(stats.relativeUplift * 100).toFixed(2)}%`, 35, yPos);
  if (stats.absoluteChange !== undefined) {
    yPos = addDataRow(pdf, 'Absolute Change:', stats.absoluteChange.toFixed(4), 35, yPos);
  }
  yPos = addDataRow(pdf, 'Significance:', `${((1 - stats.pValue) * 100).toFixed(1)}%`, 35, yPos);
  
  yPos += 20;
  
  // Conclusion
  yPos = addSectionHeader(pdf, 'Conclusion', yPos);
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(stats.significant ? resultColor[0] : resultColor[1]);
  pdf.text(stats.significant 
    ? '✓ The results are statistically significant at the 95% confidence level'
    : '⚠ The results are not statistically significant at the 95% confidence level', 
    30, yPos + 10);
  
  // Add footer
  addFooter(pdf);
  
  return pdf;
};